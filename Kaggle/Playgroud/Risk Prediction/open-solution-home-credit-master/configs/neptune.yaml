project: ORGANIZATION/home-credit

name: home-credit-default-risk
tags: [solution-6]

metric:
  channel: 'ROC_AUC'
  goal: maximize

exclude:
  - output
  - notebooks
  - neptune.log
  - offline_job.log
  - .git
  - .github
  - .idea
  - .ipynb_checkpoints

parameters:
# Data
  train_filepath:                  YOUR/PATH/TO/application_train.csv
  test_filepath:                   YOUR/PATH/TO/application_test.csv
  bureau_balance_filepath:         YOUR/PATH/TO/bureau_balance.csv
  bureau_filepath:                 YOUR/PATH/TO/bureau.csv
  credit_card_balance_filepath:    YOUR/PATH/TO/credit_card_balance.csv
  installments_payments_filepath:  YOUR/PATH/TO/installments_payments.csv
  POS_CASH_balance_filepath:       YOUR/PATH/TO/POS_CASH_balance.csv
  previous_application_filepath:   YOUR/PATH/TO/previous_application.csv
  sample_submission_filepath:      YOUR/PATH/TO/sample_submission.csv
  first_level_oof_predictions_dir: YOUR/PATH/TO/oof_predictions
  experiment_directory:            YOUR/PATH/WORKDIR

# Kaggle
  kaggle_api: 0
  kaggle_message: 'solution-6'

# Data preparation
  n_cv_splits: 5
  validation_size: 0.2
  stratified_cv: True
  shuffle: 1
  hyperparameter_search__method: None
  hyperparameter_search__runs: 0

  # Execution
  clean_experiment_directory_before_training: 1
  num_workers: 8
  verbose: 1
  callbacks_on: 1

# Preprocessing
  fill_missing: False
  fill_value: 0

# Feature Extraction
  installments__last_k_trend_periods: '[7, 30, 60, 120, 180, 360, 720]'
  installments__last_k_agg_periods: '[7, 30, 60, 180, 360, 720, 1500]'
  installments__last_k_agg_period_fractions: '[(7, 30), (30, 60), (60,180),(60,360),(180,1500),(360,1500)]'
  pos_cash__last_k_trend_periods: '[6, 12, 60]'
  pos_cash__last_k_agg_periods: '[6, 12, 24, 60]'
  pos_cash__last_k_agg_period_fractions: '[(6,24), (12, 60)]'
  bureau__last_k_agg_periods: '[7, 30, 60, 180, 360, 720, 1500]'
  bureau__last_k_agg_period_fractions:  '[(7, 30), (30, 60), (60,180), (60,360), (180,1500), (360, 1500)]'
  bureau_balance__last_k_trend_periods: '[6, 12, 60]'
  bureau_balance__last_k_agg_periods: '[6, 12, 24, 60]'
  bureau_balance__last_k_agg_period_fractions: '[(6,24), (12, 60)]'
  previous_applications__last_k_credits: '[1, 3, 5, 10]'
  application_previous_application__last_k_credits: '[1, 3, 5, 10]'
  application_aggregation__use_diffs_only: True
  use_nan_count: True

# Feature Selection
  use_application: True
  use_bureau: True
  use_bureau_balance: True
  use_credit_card_balance: True
  use_installments_payments: True
  use_pos_cash_balance: True
  use_previous_applications: True
  use_application_previous_applications: False

  use_application_aggregations: True
  use_bureau_aggregations: True
  use_credit_card_balance_aggregations: True
  use_installments_payments_aggregations: True
  use_pos_cash_balance_aggregations: True
  use_previous_applications_aggregations: True

  use_application_categorical_features: True
  use_previous_application_categorical_features: True
  use_application_previous_application_categorical_features: False

# Light GBM
  lgbm__device: cpu # gpu cpu
  lgbm__boosting_type: gbdt
  lgbm__objective: binary
  lgbm__metric: auc
  lgbm__number_boosting_rounds: 5000
  lgbm__early_stopping_rounds: 100
  lgbm__learning_rate: 0.02
  lgbm__max_bin: 300
  lgbm__max_depth: -1
  lgbm__num_leaves: 42
  lgbm__min_child_samples: 70
  lgbm__subsample: 1.0
  lgbm__subsample_freq: 1
  lgbm__colsample_bytree: 0.03
  lgbm__min_gain_to_split: 0.5
  lgbm__reg_lambda: 100.0
  lgbm__reg_alpha: 0.0
  lgbm__is_unbalance: False
  lgbm__scale_pos_weight: 1.

# Catboost
  catboost__loss_function: Logloss
  catboost__eval_metric: AUC
  catboost__iterations: 10000
  catboost__learning_rate: 0.05
  catboost__depth: 6
  catboost__l2_leaf_reg: 3
  catboost__border_count: 128
  catboost__model_size_reg: 0.5
  catboost__colsample_bylevel: 1.0
  catboost__max_ctr_complexity: 1
  catboost__od_type: 'Iter'
  catboost__od_wait: 100

# XGBoost
  xgb__booster: gbtree
  xgb__tree_method: hist # gpu_hist  # auto  hist
  xgb__objective: binary:logistic
  xgb__eval_metric: auc
  xgb__nrounds: 5000
  xgb__early_stopping_rounds: 50
  xgb__eta: 0.02
  xgb__max_leaves: 30
  xgb__max_depth: 15
  xgb__max_bin: 300
  xgb__subsample: 0.5
  xgb__colsample_bytree: 0.5
  xgb__colsample_bylevel: 1
  xgb__min_child_weight: 4
  xgb__lambda: 100
  xgb__alpha: 0.0
  xgb__scale_pos_weight: 1

# Neural Network
  nn__layers: 2
  nn__neurons: '[128, 1]'
  nn__activation: '["linear", "sigmoid"]'
  nn__dropout: '[0., 0.]'
  nn__batch_norm: '[True, False]'
  nn__l1: '[0., 0.]'
  nn__l2: '[0., 0.]'
  nn__learning_rate: 1e-2
  nn__beta_1: 0.9
  nn__beta_2: 0.99
  nn__epochs: 50
  nn__batch_size: 32

# Random forest
  rf__n_estimators: 2000
  rf__criterion: gini
  rf__max_features: 0.2
  rf__max_depth: 40
  rf__min_samples_split: 50
  rf__min_samples_leaf: 20
  rf__max_leaf_nodes: 60
  rf__class_weight: balanced

# Logistic regression
  lr__penalty: l1
  lr__tol: 1e-8
  lr__C: 1000
  lr__fit_intercept: True
  lr__class_weight: balanced
  lr__solver: liblinear
  lr__max_iter: 100

# NaiveBayes - Bernoulli
  nb__alpha: 1.
  nb__binarize: 0.

# SVC
  svc__kernel: rbf
  svc__C: 1
  svc__degree: 5
  svc__gamma: auto
  svc__coef0: 0.0
  svc__probability: True
  svc__tol: 0.00001
  svc__max_iter: -1

# Postprocessing
  aggregation_method: rank_mean
